Use Northwind

--Task5 
/*1 - Sub Queries:
     • Single Row Sub Queries
     • Multi Row Sub Queries
     • Nested Sub Queries
     • Co-Related Sub Queries*/

-- Single Row Sub Queries  [A single-row subquery is a type of SQL subquery that returns only one row of data]

select * from Orders
select * from [Order Details]

SELECT OrderID, (SELECT MAX(UnitPrice) FROM [Order Details] od WHERE o.OrderID = od.OrderID) AS MaxUnitPrice
FROM Orders o

SELECT p.ProductName, p.UnitsInStock,p.UnitPrice
FROM Products p
WHERE UnitPrice > (SELECT min(UnitPrice) FROM Products)

--Multi Row Sub Queries [A Multi-row subquery is a type of SQL subquery that returns multiple rows of data]
select * from Orders

SELECT OrderID, CustomerID FROM Orders
WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE Country = 'UK')

select * from Employees
select *from Orders
select * from Customers
select * from Suppliers

select e.EmployeeID,e.FirstName,e.Title from Employees e Where e.EmployeeID IN(select e.EmployeeID from Employees e where e.Extension<500)

--Nested Queries   Queries in Sub-Queries

SELECT * FROM Orders WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE Country IN (SELECT Country FROM Suppliers  
         WHERE SupplierID IN (SELECT SupplierID FROM Products  WHERE Discontinued = 0)))


select * from Employees where EmployeeID IN (select EmployeeID from Orders where OrderID IN(select OrderID from [Order Details] 
                          where UnitPrice>10))

--Co-Related Sub Queries

SELECT o.CustomerID, o.OrderDate, o.ShipCity FROM orders o
WHERE o.Freight > (
    SELECT AVG(o.Freight)
    FROM Orders o)

/*2 - Views:
     • Purpose Of Views
     • Creating , Altering and Dropping Views
     • Simple and Complex Views*/


	 --Purpose Of Views
	 /*The purpose of views is to provide a customized and simplified view of the data for the end-users, 
	 without them needing to know the underlying structure of the data.These are also known as virtual tables.*/

	 --Creating View


create view ProductsView 
AS
SELECT ProductID, ProductName, UnitPrice
FROM Products

select * from ProductsView

    -- Alter View
alter view ProductsView
As

select ProductName from Products
   
select * from ProductsView

-- Drop View

Drop View ProductsView


--Simple View

create View EmployeView
As
select  e.EmployeeID,e.FirstName from Employees e where e.Country='UK'

select * from EmployeView



-- Complex View

Create View OrderViews
As
SELECT * FROM Orders WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE Country IN (SELECT Country FROM Suppliers  
         WHERE SupplierID IN (SELECT SupplierID FROM Products  WHERE Discontinued = 0)))

select * from OrderView

/*3 - Indexes
     • Clustered Index
     • NonClustered Index
     • Create , Alter and Drop Indexes
     • Using Indexes*/


	 select * from Products

create table Carr(
CarName varchar(50),
PltNO int Primary key not null,  -- i-Identity using Unique attribute in my table
color varchar(50)
)

Insert into Carr(CarName,PltNO,color) values('merce',7655, 'black'),('Honda', 3453,'White'),('Audi',3456,'Grey')

select * from Carr

CREATE INDEX IndexCar
ON Carr (pltNO);


-- To create clusteer index we have to delete primary key of our table because clustered are usually made on primary keys by default

execute sp_helpindex Carr

CREATE clustered INDEX IndexCar
ON Carr (pltNO);

alter  INDEX IndexCar
ON Carr REBUILD

drop clustered index IndexCar 

CREATE nonclustered INDEX IndexCar
ON Carr (pltNO);


alter  INDEX IndexCar
ON Carr REBUILD

--Task # 6

--1 Write a query to retrieve the names of all products that have been ordered more than 50 time.

SELECT ProductName from Products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID
Group by p.ProductName having SUM(Quantity) > 50

--2- Write a query to retrieve the names of all products that have been ordered at least once.
select * from [Order Details]
select * from Orders

select ProductName from Products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID

--3 - Create a view that shows the total revenue generated by each category.

CREATE VIEW CategoryRevenue
AS
Select c.CategoryName, SUM(od.UnitPrice * Od.Quantity * (1 - Od.Discount)) AS TotalRevenue
From Categories c INNER JOIN Products p ON c.CategoryID = p.CategoryID INNER JOIN [Order Details] od ON p.ProductID = Od.ProductID
GROUP BY c.CategoryName

select * from CategoryRevenue





