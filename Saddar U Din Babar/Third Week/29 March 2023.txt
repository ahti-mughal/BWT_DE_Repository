-- 29 March 2023


-- task #5



--Sub queries

-- â€¢ Single Row Sub Queries 



select * from student where rollNo=


(select rollNo from course where courseName = 'DSA' );



-- Multi Row Sub Queries

 
select * from student where rollNo = any
 
(select rollNo from course group By rollNo desc);
 


 -- nested sub queries
 

select * from student where rollNo = any 
 
( select rollNo from course where serialNo=any
 
(select empNo from employee group by empNo));
 
 

-- corelated subqueries
 
 

select * from student where rollNo IN 
 
(
   select rollNo from course where courseId>70
 );



--2 Viewes:

Purpose of Views:

In a database, a view is a virtual table that is based on the result set of a SELECT statement. 
The purpose of a view is to provide a way to simplify complex queries by abstracting the underlying data and presenting 
it in a more understandable and manageable form.

-- creating view


create view stdCourse as 
(select rollNo ,courseName from course order by rollNo);



-- altering view


alter view stdCourse as 
select rollNo,courseName, courseCode from course order by rollNo;



-- droping a view


drop view stdCourse;



Simple View:

A simple view is a view that is based on a single table and a straightforward SELECT statement. 
It does not include any JOINs, GROUP BYs, or other complex SQL operations. 
Simple views are easy to understand and maintain, and they can be updated in most cases as long as the underlying 
table structure remains the same.


Complex View:

A complex view, on the other hand, is a view that involves multiple tables, joins, aggregations, 
or other advanced SQL operations. Complex views can be more difficult to understand and maintain, 
and they may require more resources to compute. They may also be more difficult to update, 
especially if the underlying table structures change frequently.



Index:

Clustured Index:

A clustered index is a type of database index that determines the physical ordering of data in a table. 
In a clustered index, the data is stored in a specific order based on the values in one or more columns, 
which are called the clustering keys.
In summary, clustered indexes are a powerful tool for improving the performance of queries that use the clustering keys, 
but they should be used judiciously and with an understanding of their limitations.


Non-Clustered Index:

A non-clustered index is a type of database index that stores a separate data structure that maps the values in one or more columns 
to the physical location of the corresponding rows in a table. Unlike a clustered index, a non-clustered index does not determine the 
physical ordering of the data in the table.
In summary, non-clustered indexes are a powerful tool for improving the performance of queries that involve the indexed columns, 
but they should be used judiciously and with an understanding of their limitations.

-- Creating index


CREATE INDEX i
ON student (rollNo);



-- altering index


ALTER TABLE student
  DROP INDEX i,
  ADD INDEX j (name);
  
  

-- drop index
  

alter table student 
  drop index j;




-- Task #6

-- 1 - Write a query to retrieve the names of all products that have been ordered more than 50 time.

SELECT Products.name
FROM Products
JOIN Orders ON Products.id = Orders.product_id
GROUP BY Products.id
HAVING COUNT(*) > 50;



-- 2 - Write a query to retrieve the names of all products that have been ordered at least once.

SELECT Products.name
FROM Products
JOIN Orders ON Products.id = Orders.product_id
GROUP BY Products.id;


-- 3 - Create a view that shows the total revenue generated by each category.


CREATE VIEW Category_Revenue AS
SELECT Categories.name AS category_name, SUM(Products.price * Order_Items.quantity) AS total_revenue
FROM Categories
JOIN Products ON Categories.id = Products.category_id
JOIN Order_Items ON Products.id = Order_Items.product_id
GROUP BY Categories.id;
